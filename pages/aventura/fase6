import { useState, useEffect } from "react";
import { useRouter } from "next/router";

export default function FaseGatos8Bit() {
  const router = useRouter();
  const [perguntaAtual, setPerguntaAtual] = useState(0);
  const [pontos, setPontos] = useState(0);
  const [gameOver, setGameOver] = useState(false);
  const [mostraResposta, setMostraResposta] = useState(false);
  const [pixelEffect, setPixelEffect] = useState(false);

  const perguntas = [
    {
      pergunta: "Se você fosse um gato, qual seria seu superpoder?",
      opcoes: [
        "Ronronar tão alto que derreteria o coração dele 💖",
        "Fazer cafuné telepático à distância 🐾",
        "Transformar qualquer caixa em portal do amor ✨",
        "Todas as opções acima porque sou purrfeita! 😸",
      ],
      correta: 3,
    },
    {
      pergunta: "Qual a melhor hora para receber carinho?",
      opcoes: [
        "3h da manhã, obviamente! 🌙",
        "Quando ele está trabalhando 💻",
        "Durante comerciais de TV 📺",
        "24/7 porque amor não tem hora! ⏰",
      ],
      correta: 3,
    },
    {
      pergunta:
        "Se vocês fossem gatos juntos, qual seria a atividade favorita?",
      opcoes: [
        "Derrubar coisas da mesa juntos 😈",
        "Dormir grudadinhos 16h por dia 😴",
        "Caçar borboletas no jardim 🦋",
        "Brigar por quem senta no teclado primeiro ⌨️",
      ],
      correta: 1,
    },
  ];

  useEffect(() => {
    // Efeito pixel art 8-bit
    const interval = setInterval(() => {
      setPixelEffect((prev) => !prev);
    }, 500);
    return () => clearInterval(interval);
  }, []);

  const responder = (opcao) => {
    if (opcao === perguntas[perguntaAtual].correta) {
      setPontos(pontos + 100);
    }
    setMostraResposta(true);

    setTimeout(() => {
      if (perguntaAtual < perguntas.length - 1) {
        setPerguntaAtual(perguntaAtual + 1);
        setMostraResposta(false);
      } else {
        setGameOver(true);
      }
    }, 2000);
  };

  const avancar = () => {
    router.push("/aventura/steven-universe");
  };

  return (
    <div style={containerStyle}>
      {/* Estrelas 8-bit animadas */}
      <div style={starsContainer}>
        {[...Array(20)].map((_, i) => (
          <div
            key={i}
            style={{
              ...starStyle,
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 3}s`,
            }}
          >
            ⭐
          </div>
        ))}
      </div>

      <div style={gameContainer}>
        <h1
          style={{
            ...titleStyle,
            textShadow: pixelEffect ? "0 0 20px #ff69b4" : "0 0 10px #ff1493",
          }}
        >
          🐱 QUIZ DOS GATOS 8-BIT 🐱
        </h1>

        {!gameOver ? (
          <div style={questionContainer}>
            <div style={scoreStyle}>
              PONTOS: {pontos} | FASE: {perguntaAtual + 1}/3
            </div>

            <div style={pixelCat}>{pixelEffect ? "🐱" : "😸"}</div>

            <h2 style={questionStyle}>{perguntas[perguntaAtual].pergunta}</h2>

            {!mostraResposta ? (
              <div style={optionsContainer}>
                {perguntas[perguntaAtual].opcoes.map((opcao, index) => (
                  <button
                    key={index}
                    onClick={() => responder(index)}
                    style={{
                      ...optionButton,
                      backgroundColor: index % 2 === 0 ? "#ff1493" : "#00bfff",
                      transform: pixelEffect ? "scale(1.05)" : "scale(1)",
                    }}
                  >
                    {opcao}
                  </button>
                ))}
              </div>
            ) : (
              <div style={feedbackStyle}>
                <div style={{ fontSize: "3rem" }}>
                  {mostraResposta ? "🎉" : ""}
                </div>
                <p>Resposta registrada no sistema dos gatos! 🐾</p>
              </div>
            )}
          </div>
        ) : (
          <div style={gameOverContainer}>
            <h2 style={finalScoreStyle}>🏆 PONTUAÇÃO FINAL: {pontos}/300 🏆</h2>
            <div style={{ fontSize: "4rem", margin: "20px 0" }}>
              {pontos >= 200 ? "👑🐱👑" : "🐱💖"}
            </div>
            <p style={finalMessageStyle}>
              {pontos >= 200
                ? "PURRFEITA! Você é oficialmente uma especialista em gatos! 😻"
                : "Muito bem! Os gatos aprovam seu coração carinhoso! 🥰"}
            </p>
            <button onClick={avancar} style={nextButton}>
              PRÓXIMA DIMENSÃO → 🌟
            </button>
          </div>
        )}
      </div>

      {/* Easter egg: clique nos cantos */}
      <div
        style={{
          position: "absolute",
          top: 0,
          left: 0,
          width: "50px",
          height: "50px",
          cursor: "pointer",
        }}
        onClick={() => setPontos(pontos + 50)}
      />
      <div
        style={{
          position: "absolute",
          top: 0,
          right: 0,
          width: "50px",
          height: "50px",
          cursor: "pointer",
        }}
        onClick={() => setPontos(pontos + 50)}
      />
    </div>
  );
}

const containerStyle = {
  minHeight: "100vh",
  background: "linear-gradient(45deg, #000428 0%, #004e92 100%)",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  fontFamily: '"Courier New", monospace',
  color: "#ffffff",
  position: "relative",
  overflow: "hidden",
  padding: "20px",
};

const starsContainer = {
  position: "absolute",
  top: 0,
  left: 0,
  width: "100%",
  height: "100%",
  pointerEvents: "none",
};

const starStyle = {
  position: "absolute",
  fontSize: "12px",
  animation: "twinkle 3s infinite",
};

const gameContainer = {
  backgroundColor: "rgba(0, 0, 0, 0.8)",
  border: "4px solid #ff69b4",
  borderRadius: "15px",
  padding: "30px",
  maxWidth: "600px",
  width: "100%",
  textAlign: "center",
  boxShadow: "0 0 30px rgba(255, 105, 180, 0.5)",
  position: "relative",
};

const titleStyle = {
  fontSize: "24px",
  marginBottom: "20px",
  color: "#ff69b4",
  letterSpacing: "2px",
  textTransform: "uppercase",
};

const scoreStyle = {
  backgroundColor: "#000",
  color: "#00ff00",
  padding: "10px",
  borderRadius: "5px",
  marginBottom: "20px",
  fontSize: "16px",
  fontWeight: "bold",
  border: "2px solid #00ff00",
};

const pixelCat = {
  fontSize: "5rem",
  margin: "20px 0",
  filter: "drop-shadow(0 0 10px #ff69b4)",
};

const questionStyle = {
  fontSize: "20px",
  marginBottom: "30px",
  color: "#fff",
  lineHeight: "1.4",
};

const optionsContainer = {
  display: "flex",
  flexDirection: "column",
  gap: "15px",
};

const optionButton = {
  padding: "15px 20px",
  fontSize: "16px",
  border: "3px solid #fff",
  borderRadius: "10px",
  cursor: "pointer",
  color: "#fff",
  fontWeight: "bold",
  transition: "all 0.3s ease",
  textAlign: "left",
  fontFamily: '"Courier New", monospace',
};

const feedbackStyle = {
  padding: "20px",
  backgroundColor: "rgba(0, 255, 0, 0.1)",
  borderRadius: "10px",
  border: "2px solid #00ff00",
};

const gameOverContainer = {
  textAlign: "center",
};

const finalScoreStyle = {
  fontSize: "24px",
  color: "#ffd700",
  marginBottom: "20px",
};

const finalMessageStyle = {
  fontSize: "18px",
  marginBottom: "30px",
  lineHeight: "1.5",
};

const nextButton = {
  padding: "15px 30px",
  fontSize: "18px",
  backgroundColor: "#ff1493",
  border: "3px solid #fff",
  borderRadius: "10px",
  color: "#fff",
  cursor: "pointer",
  fontWeight: "bold",
  transition: "all 0.3s ease",
  fontFamily: '"Courier New", monospace',
};
